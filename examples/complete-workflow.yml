name: Complete Release and Deploy

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g. v1.0.0)'
        required: false
      rel:
        description: 'Release number (e.g. 1)'
        required: false
        default: '1'
      build_linux:
        description: 'Build for Linux'
        required: false
        default: 'true'
        type: boolean
      build_windows:
        description: 'Build for Windows'
        required: false
        default: 'true'
        type: boolean

jobs:
  release_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Optional: Install dependencies, run tests, etc.
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y zip

      - name: Build and Prepare Release
        id: release
        uses: Da4ndo/rust-aur-release-deploy@v1
        with:
          pkg_name: my-rust-app
          version: ${{ github.event.inputs.version }}
          rel: ${{ github.event.inputs.rel || '1' }}
          
          # Build configuration
          build_linux: ${{ github.event.inputs.build_linux || true }}
          build_windows: ${{ github.event.inputs.build_windows || true }}
          
          # Platform-specific files
          linux_files: |
            [
              "LICENSE",
              "README.md",
              "config/linux.toml",
              "assets/linux/*"
            ]
          windows_files: |
            [
              "LICENSE",
              "README.md",
              "config/windows.toml",
              "assets/windows/*"
            ]
          
          # Additional release files (not included in platform packages)
          release_files: |
            [
              "CHANGELOG.md",
              "docs/*",
              "examples/*"
            ]
          
          # AUR configuration
          prepare_aur: true
          pkgbuild: './PKGBUILD'
          pkgbuild_output_path: './prepared_pkgbuild/PKGBUILD'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Optional: Create release notes
      - name: Generate Release Notes
        if: success()
        run: |
          echo "## Release Information" > release_notes.md
          echo "### Linux Build" >> release_notes.md
          if [[ -n "${{ steps.release.outputs.linux_archive }}" ]]; then
            echo "- Archive: ${{ steps.release.outputs.linux_archive }}" >> release_notes.md
            echo "- SHA256: ${{ steps.release.outputs.linux_sha256 }}" >> release_notes.md
          fi
          echo "### Windows Build" >> release_notes.md
          if [[ -n "${{ steps.release.outputs.windows_archive }}" ]]; then
            echo "- Archive: ${{ steps.release.outputs.windows_archive }}" >> release_notes.md
            echo "- SHA256: ${{ steps.release.outputs.windows_sha256 }}" >> release_notes.md
          fi

      # Deploy to AUR if Linux build is enabled
      - name: Deploy to AUR
        if: github.event.inputs.build_linux != 'false'
        uses: KSXGitHub/github-actions-deploy-aur@v4.1.1
        with:
          pkgname: my-rust-app
          pkgbuild: ${{ steps.release.outputs.pkgbuild_path }}
          commit_username: ${{ secrets.AUR_USERNAME }}
          commit_email: ${{ secrets.AUR_EMAIL }}
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          commit_message: "Update to version ${{ steps.release.outputs.version }}"
          ssh_keyscan_types: rsa,ecdsa,ed25519

      # Optional: Update documentation
      - name: Update Documentation
        if: success()
        run: |
          echo "## Installation" > INSTALL.md
          echo "### From AUR (Arch Linux)" >> INSTALL.md
          echo "\`\`\`bash" >> INSTALL.md
          echo "yay -S my-rust-app" >> INSTALL.md
          echo "\`\`\`" >> INSTALL.md
          echo "### Manual Installation" >> INSTALL.md
          echo "Download the appropriate package for your system:" >> INSTALL.md
          if [[ -n "${{ steps.release.outputs.linux_archive }}" ]]; then
            echo "- Linux: [my-rust-app-${{ steps.release.outputs.version }}-linux-x86_64.tar.gz](${{ steps.release.outputs.linux_archive }})" >> INSTALL.md
          fi
          if [[ -n "${{ steps.release.outputs.windows_archive }}" ]]; then
            echo "- Windows: [my-rust-app-${{ steps.release.outputs.version }}-windows-x86_64.zip](${{ steps.release.outputs.windows_archive }})" >> INSTALL.md
          fi 